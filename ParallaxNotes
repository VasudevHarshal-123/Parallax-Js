                                                                                                                                                                     HTML  data attributes 	
//BE website has SVG as that mouse thing																																									 


    The syntax is simple. Any attribute on any element whose attribute name starts with data- is a data attribute. 
	
	The data-* global attributes form a class of attributes called custom data attributes, that allow proprietary information to be exchanged between the HTML and its DOM representation by scripts.
	
	<article
		  id="electric-cars"
		  data-columns="3"
		  data-index-number="12314"
		  data-parent="cars">
		...
     </article>
	 
	 
	 Reading the values of these attributes out in JavaScript is also very simple. You could use getAttribute() with their full HTML name to read them, but the standard defines a simpler way: a DOMStringMap you can read out via a dataset property.

		To get a data attribute through the dataset object, get the property by the part of the attribute name after data- (note that dashes are converted to camelCase).

		const article = document.querySelector('#electric-cars');
		 
		article.dataset.columns // "3"
		article.dataset.indexNumber // "12314"
		article.dataset.parent // "cars"
		Each property is a string and can be read and written. In the above case setting article.dataset.columns = 5 would change that attribute to "5".
		
		
				CSS access
					Note that, as data attributes are plain HTML attributes, you can even access them from CSS. For example to show the parent data on the article you can use generated content in CSS with the attr() function:

					article::before {
					  content: attr(data-parent);content: attr(data-parent);
					}
					You can also use the attribute selectors in CSS to change styles according to the data:

					article[data-columns='3'] {
					  width: 400px;
					}
					article[data-columns='4'] {
					  width: 600px;
					}
					You can see all this working together in this JSBin example.
					
					
					
																																						Window pageXOffset and pageYOffset Properties

			The pageXOffset and pageYOffset properties returns the pixels the current document has been scrolled from the upper left corner of the window, horizontally and vertically.

			The pageXOffset and pageYOffset properties are equal to the scrollX and scrollY properties.

			These properties are read-only.
			
			
			
			
																																									align-items vs align-content
																																							
			The align-items property of flex-box aligns the items inside a flex container along the cross axis just like justify-content does along the main axis. 
			(For the default flex-direction: row the cross axis corresponds to vertical and the main axis corresponds to horizontal. With flex-direction: column those two are interchanged respectively).

			But align-content is for multi line flexible boxes. It has no effect when items are in a single line. It aligns the whole structure according to its value. 	




D- content @keyframes			
\


                                                                                                                                                                             ::before (:before)
																																											 
		Note: The pseudo-elements generated by ::before and ::after are contained by the element's formatting box, and thus don't apply to replaced elements such as <img>, or to <br> elements.																																									 